{"version":3,"file":"js/custom.js","sources":["js/custom.js"],"names":["wrapLetters","element","type","replace","text","innerText","innerHTML","htmlElement","document","querySelector","Reveal","addEventListener","event","fragment","classList","contains","add","removeBlackout","remove"],"mappings":"cAAA,WAyBE,QAASA,GAAaC,GACpB,GAAIC,EAAM,CACR,GAAMC,GAAU,kBACVC,EAAOF,EAAKG,UAAUF,QAAQ,qBAAsBA,EAE1DD,GAAKI,UAAYF,GAzBrB,GAAMG,GAAcC,SAASC,cAAc,OAG3CC,QAAOC,iBAAiB,gBAAiB,SAACC,GACxC,GAAMC,GAAWD,EAAMC,QAGnBA,GAASC,WAAaD,EAASC,UAAUC,SAAS,mBACpDR,EAAYO,UAAUE,IAAI,aAK9B,IAAMC,GAAiB,iBAAMV,GAAYO,UAAUI,OAAO,YAG1DR,QAAOC,iBAAiB,iBAAkBM,GAC1CP,OAAOC,iBAAiB,eAAgBM,EAYxC,IAAMf,GAAOM,SAASC,cAAc,YAEpCT,GAAYE;;AApCd,CAAC,YAAM;;AAEL,cAAY,CAAC;;;AAGb,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;;;AAGnD,QAAM,CAAC,gBAAgB,CAAC,eAAe,EAAE,UAAC,KAAK,EAAK;AAClD,QAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;;;AAGhC,QAAI,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;AACvE,iBAAW,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;KACvC;GACF,CAAC,CAAC;;;AAGH,MAAM,cAAc,GAAG,SAAjB,cAAc;WAAS,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC;GAAA,CAAC;;;AAGtE,QAAM,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;AAC1D,QAAM,CAAC,gBAAgB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;;;AAGxD,WAAS,WAAW,CAAE,OAAO,EAAG;AAC9B,QAAI,IAAI,EAAE;AACR,UAAM,OAAO,GAAG,iBAAiB,CAAC;AAClC,UAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;;AAEnE,UAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACvB;GACF,CAAC;;AAEF,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;;AAEjD,aAAW,CAAC,IAAI,CAAC,CAAC;CAEnB,CAAA,EAAG,CAAC","sourcesContent":["(() => {\n\n  'use strict';\n\n  // We'll reference this element several times\n  const htmlElement = document.querySelector('html');\n\n  // Bind a function to the `fragmentshown` event so we can do some custom bits\n  Reveal.addEventListener('fragmentshown', (event) => {\n    const fragment = event.fragment;\n\n    // For fragments with a `dim-the-lights` class, we dim the lights\n    if (fragment.classList && fragment.classList.contains('dim-the-lights')) {\n      htmlElement.classList.add('blackout');\n    }\n  });\n\n  // Define a quick function to remove the blackout class from the document\n  const removeBlackout = () => htmlElement.classList.remove('blackout');\n\n  // Bind the function to Reveal actions so we get the desired effect\n  Reveal.addEventListener('fragmenthidden', removeBlackout);\n  Reveal.addEventListener('slidechanged', removeBlackout);\n\n  // For fun, let's play with type\n  function wrapLetters( element ) {\n    if (type) {\n      const replace = \"<span>$&</span>\";\n      const text = type.innerText.replace(/([^\\x00-\\x80]|\\w)/g, replace);\n\n      type.innerHTML = text;\n    }\n  };\n\n  const type = document.querySelector('.demolish');\n\n  wrapLetters(type);\n\n})();\n"]}